@model IEnumerable<Employee>
@using Ont3010_Project_YA2024.Models.admin

@{
    ViewData["Title"] = "Employee Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@if (TempData["created"] != null)
{
    <div id="createdMessage" class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i> @TempData["created"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["deleted"] != null)
{
    <div id="deletedMessage" class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-trash-alt"></i> @TempData["deleted"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["updated"] != null)
{
    <div id="updatedMessage" class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-pencil-alt"></i> @TempData["updated"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["restored"] != null)
{
    <div id="restoredMessage" class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-undo-alt"></i> @TempData["restored"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["Error"] != null)
{
    <div id="errorMessage" class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="employee-details-container">
    <h1 class="text-center mb-4">
        <i class="fas fa-home"></i> Employee
    </h1>
    <hr />

    <div class="container mb-4">
        <div class="row">
            <div class="col-md-6">
                <p>
                    <a asp-action="Create" class="btn btn-primary btn-sm"><i class="fas fa-plus"></i> Create New Employee</a>
                </p>
            </div>
            <div class="col-md-6">
                <form asp-action="Index" method="get" class="form-inline float-right">
                    <div class="input-group">
                        <input type="text" name="searchString" class="form-control" placeholder="Search by name" value="@ViewData["CurrentFilter"]" />
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-search"></i> Search
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="table-container">
        <div class="sort-options mb-3">
            <label for="sortOrder">Sort By:</label>
            <select id="sortOrder" data-current-sort="@ViewData["CurrentSort"]">
                <option value="FirstName" selected="@(ViewData["CurrentSort"]?.ToString() == "FirstName")">First Name</option>
                <option value="LastName" selected="@(ViewData["CurrentSort"]?.ToString() == "LastName")">Last Name</option>
                <option value="Role" selected="@(ViewData["CurrentSort"]?.ToString() == "Role")">Role</option>
                <option value="DateOfHire" selected="@(ViewData["CurrentSort"]?.ToString() == "DateOfHire")">Date of Hire</option>
            </select>

            <label for="sortDirection">Sort Direction:</label>
            <select id="sortDirection">
                <option value="asc" selected="@(ViewData["CurrentDirection"]?.ToString() == "asc")">Ascending</option>
                <option value="desc" selected="@(ViewData["CurrentDirection"]?.ToString() == "desc")">Descending</option>
            </select>
        </div>





        <table class="table table-striped table-hover custom-table table-responsive">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.FirstName)</th>
                    <th>@Html.DisplayNameFor(model => model.LastName)</th>
                    <th>@Html.DisplayNameFor(model => model.Role)</th>
                    <th>@Html.DisplayNameFor(model => model.DateOfHire)</th>
                    <th>@Html.DisplayNameFor(model => model.IsDeleted)</th>
                    <th style="color: black;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="@(item.IsDeleted ? "is-deleted" : "")">
                        <td>@Html.DisplayFor(modelItem => item.FirstName)</td>
                        <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Role)</td>
                        <td>@Html.DisplayFor(modelItem => item.DateOfHire)</td>
                        <td>@Html.DisplayFor(modelItem => item.IsDeleted)</td> <!-- New column for Employment Status -->
                        <td>
                            @if (item.IsDeleted)
                            {
                                <a asp-action="Details" class="btn btn-success btn-sm" asp-route-id="@item.EmployeeId">
                                    <i class="fas fa-info-circle"></i> Details
                                </a>
                                <form asp-action="Restore" method="post" class="d-inline">
                                    <input type="hidden" name="id" value="@item.EmployeeId" />
                                    <input type="hidden" name="email" value="@item.Email" />
                                    <button type="submit" class="btn btn-warning btn-sm" onclick="return confirm('Are you sure you want to restore this employee?');">
                                        <i class="fas fa-undo"></i> Restore
                                    </button>
                                </form>
                            }
                            else
                            {
                                <a asp-action="Details" class="btn btn-success btn-sm" asp-route-id="@item.EmployeeId">
                                    <i class="fas fa-info-circle"></i> Details
                                </a>
                                <a asp-action="Edit" class="btn btn-primary btn-sm" asp-route-id="@item.EmployeeId">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <a asp-action="Delete" class="btn btn-danger btn-sm" asp-route-id="@item.EmployeeId">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="pagination-container">
        @if (Model != null && Model.Any())
        {
            <div class="pagination">
                @if (ViewBag.CurrentPage > 1) // Check if current page is greater than 1 for Previous button
                {
                    <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage - 1)" class="btn btn-secondary">Previous</a>
                }
                else
                {
                    <a class="btn btn-secondary disabled">Previous</a>
                    // Disabled button if on the first page
                }

                <span>Page @ViewBag.CurrentPage of @ViewBag.TotalPages</span>

                @if (ViewBag.CurrentPage < ViewBag.TotalPages) // Check if current page is less than total pages for Next button
                {
                    <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage + 1)" class="btn btn-secondary">Next</a>
                }
                else
                {
                    <a class="btn btn-secondary disable">Next</a>
                    // Disabled button if on the last page
                }
            </div>
        }
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
      
        // Function to hide TempData messages after 3 seconds
        $(document).ready(function () {
            setTimeout(function () {
                $("#createdMessage").fadeOut();
                $("#deletedMessage").fadeOut();
                $("#updatedMessage").fadeOut();
                $("#restoredMessage").fadeOut();
                $("#errorMessage").fadeOut();
            }, 3000);
        });

    </script>
    <script>
        function updateSorting() {
            var sortOrder = document.getElementById('sortOrder').value;
            var sortDirection = document.getElementById('sortDirection').value;
            var currentFilter = '@ViewData["CurrentFilter"]';
            var currentPage = '@ViewBag.CurrentPage';

            var url = '@Url.Action("Index")' +
                '?sortOrder=' + sortOrder +
                '&sortDirection=' + sortDirection;

            if (currentFilter) {
                url += '&searchString=' + encodeURIComponent(currentFilter);
            }

            if (currentPage) {
                url += '&page=' + currentPage;
            }

            window.location.href = url;
        }

        // Add event listeners for both dropdowns
        document.getElementById('sortOrder').addEventListener('change', updateSorting);
        document.getElementById('sortDirection').addEventListener('change', updateSorting);

        $(document).ready(function () {
            $('.table').DataTable({
                "ordering": true,
                "paging": true,
                "searching": true
            });
        });
    </script>

    <style>
        .employee-details-container {
            background-color: #f8f9fa;
            border: 1px solid #ced4da;
            border-radius: .375rem;
            padding: 10px;
            margin: 10px 0;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        /* Container for the table */
        .table-container {
            overflow-x: auto; /* Ensure the table is scrollable on small screens */
        }

        .custom-table {
            width: 100%;
            border-collapse: collapse;
        }

            .custom-table th, .custom-table td {
                padding: 12px 15px; /* Add padding for better spacing */
            }

            .custom-table th {
                background-color: white; /* Bootstrap primary color */
                color: black;
                text-align: left;
            }

            .custom-table tbody tr:hover {
                background-color: #f1f1f1; /* Highlight row on hover */
            }

            .custom-table tbody tr.is-deleted {
                color: red; /* Indicate deleted rows */
            }

        /* Button styling */
        .btn {
            border-radius: 0.3rem;
        }

        .btn-lg {
            padding: 0.75rem 1.5rem;
        }

        .btn-sm {
            padding: 0.5rem 0.75rem;
        }

        /* Pagination styling */
        .pagination-container {
            text-align: center;
            margin-top: 20px;
        }
    </style>
}
